

                       Baltrad Installation guide for CentOS7
==========================================================================================
This installation guide expects that you have an freshly installed CentOS-7 and that you
are going to let this host take care of database storage, processing and everything else
that comes with beeing a baltrad node.

Any command executed in a CentOS shell, will be prefixed with '%>' or '<user> ~]$'

There are several packages required just to be able to install the baltrad node. In Appendix A,
you can see an example of the rpm:s that was generated at the first 2.0.3 build by the automatic build process. 
Usually all these rpms will be shipped in the same directory so when it's time you can usually just 
install everything at once with *.rpm which is fortunate since it's well over 40 different rpms.

Since Python2.7 soon is not going to be maintained after Januari 2020 and due to that, the baltrad packages
are only going to be supported on Python 3. Right now, we have created CentOS 7/ RedHat 7 RPM:s for Python3.6.
We have also created some debian packages for Python 2.7 with the hopes that we in the nearby future also will
have time to update these to Python 3.

=============== Third-party packages ===============
We have tried to use as many existing RPM:s as possible to get the required dependencies in place. But, for Python 3.6
it has prooved to be quite difficult on CentOS/RedHat 7. Several packages has not been created as RPMs and to not be forced 
to use PIP prior the RPM installation we have created a number of RPM:s from PIP by using the tool py2pack and then modified
the .spec files slightly. Our hope is that these pip packages will be included in the official CentOS/RedHat 8 release but
until then you can use the packages we have created. All these packages have the format python36-<pip-name>-blt-<version>.rpm.

Since these PIP packages have different LICENSING information, we would like to refer you to their respective homepage for
further information.

Currently, the PIP packages we have created RPMs from are:
CherryPy             3.8.2
python-daemon        2.2.3
decorator            4.3.2
docutils             0.14
jprops               2.0.2
python3-keyczar      0.71rc0
lockfile             0.12.2
pbr                  1.10.0
pillow               5.4.1
progressbar33        2.4
psycopg2             2.7.7
pyasn1               0.4.5
pycrypto             2.4
sqlalchemy           1.0.13
sqlalchemy-migrate   0.10.0
sqlparse             0.2.4
tempita              0.5.2
werkzeug             0.14

=============== Dependencies ===============
Before we even atempt to install the packages described above, several dependencies has to be installed. The first thing
you will have to do is to install the latest epel-release rpm which you can find here 
  - http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/
  
Then you install the epel release rpm by typing
%> rpm -Uvh epel-release*.rpm
 
It might also be a good idea to install postgres
%> sudo yum install postgresql postgresql-devel postgresql-contrib postgresql-server

Another package that are available from the epel release is actually python 3.6 so you probably should install
%> sudo yum install python36 python36-devel python36-libs python36-setuptools

as well.

=============== Installation ===============
As described earlier, the installation of a complete node consists of more than 40 different rpms. Some of these rpms are not
necessary and some might conflict with others. Since the package builder doesn't care on what rpms are packaged and just
copies the result you might for example get packages with one generic and one centos.
 
Fortunately, the installation of these rpms will be quite simple if you have managed to perform the above described scripts. Since yum
is good at extracting the necessary dependencies from an rpm most dependencies will be found just by trying to install the baltrad node rpms.
Get the baltrad node rpms and place them in a directory, then just type:
 
 # NOTE! I use yum to automatically get most of the dependencies installed. 
 %> yum -y install *.rpm
 
 Now, yum will calculate a lot of dependencies and then it will produce some output with all the dependencies it can find and then ask if
 you want to continue with the installation, answer "y".
 After a while, a similar output to this will be shown.
 
--------------------
Installed:
  baltrad-beast.x86_64 0:2.0.3-1.el7                         baltrad-beast-external.x86_64 0:2.0.3-1.el7          baltrad-config.x86_64 0:2.0.3-1.el7               
  baltrad-db.x86_64 0:2.0.3-1.el7                            baltrad-db-external.x86_64 0:2.0.3-1.el7             baltrad-db-java.x86_64 0:2.0.3-1.el7              
  baltrad-dex.x86_64 0:2.0.3-1.el7                           baltrad-dex-tomcat.x86_64 0:2.0.3-1.el7              baltrad-node-tomcat.x86_64 0:8.5.34-1.el7         
  baltrad-viewer.noarch 0:2.0.3-1.el7                        baltrad-wrwp.x86_64 0:2.0.3-1.el7                    baltrad-wrwp-devel.x86_64 0:2.0.3-1.el7           
  baltrad-wrwp-python.x86_64 0:2.0.3-1.el7                   bbufr.x86_64 0:2.0.3-1.el7                           beamb.x86_64 0:2.0.3-1.el7                        
  beamb-devel.x86_64 0:2.0.3-1.el7                           bropo.x86_64 0:2.0.3-1.el7                           bropo-devel.x86_64 0:2.0.3-1.el7                  
  hdfview.noarch 0:2.8-1.el7                                 hlhdf.x86_64 0:0.8.9-1.el7                           hlhdf-devel.x86_64 0:0.8.9-1.el7                  
  hlhdf-python.x86_64 0:0.8.9-1.el7                          jhdf.x86_64 0:2.8-1.el7                              jhdf5.x86_64 0:2.8-1.el7                          
  jhdfobj.noarch 0:2.8-1.el7                                 python36-cherrypy-blt.x86_64 0:3.8.2-0               python36-daemon-blt.x86_64 0:2.2.3-0              
  python36-decorator-blt.x86_64 0:4.3.2-0                    python36-docutils-blt.x86_64 0:0.14-0                python36-jprops-blt.x86_64 0:2.0.2-0              
  python36-keyczar-blt.x86_64 0:0.71rc0-0                    python36-lockfile-blt.x86_64 0:0.12.2-0              python36-pbr-blt.x86_64 0:1.10.0-0                
  python36-pillow-blt.x86_64 0:5.4.1-0                       python36-progressbar33-blt.x86_64 0:2.4-0            python36-psycopg2-blt.x86_64 0:2.7.7-0            
  python36-pyasn1-blt.x86_64 0:0.4.5-0                       python36-pycrypto-blt.x86_64 0:2.4-0                 python36-sqlalchemy-blt.x86_64 0:1.0.13-0         
  python36-sqlalchemy-migrate-blt.x86_64 0:0.10.0-0          python36-sqlparse-blt.x86_64 0:0.2.4-0               python36-tempita-blt.x86_64 0:0.5.2-0             
  python36-werkzeug-blt.x86_64 0:0.14-0                      rave.x86_64 0:2.0.3-1.el7                            rave-devel.x86_64 0:2.0.3-1.el7                   

Dependency Installed:
  atlas.x86_64 0:3.10.1-12.el7             blis.x86_64 0:0.4.1-2.el7               hdf.x86_64 0:4.2.13-1.el7                     hdf5.x86_64 0:1.8.12-10.el7               hdf5-devel.x86_64 0:1.8.12-10.el7      lapack.x86_64 0:3.4.2-8.el7             libaec.x86_64 0:1.0.2-1.el7           
  libaec-devel.x86_64 0:1.0.2-1.el7        libgfortran.x86_64 0:4.8.5-28.el7_5.1   libquadmath.x86_64 0:4.8.5-28.el7_5.1         libtomcrypt.x86_64 0:1.17-26.el7          libtommath.x86_64 0:0.42.0-6.el7       memkind.x86_64 0:1.5.0-1.el7            netcdf.x86_64 0:4.3.3.1-5.el7         
  numpy.x86_64 1:1.7.1-13.el7              postgresql.x86_64 0:9.2.24-1.el7_5      postgresql-jdbc.noarch 0:9.2.1002-6.el7_5     postgresql-libs.x86_64 0:9.2.24-1.el7_5   proj.x86_64 0:4.8.0-4.el7              proj-devel.x86_64 0:4.8.0-4.el7         python-cherrypy.noarch 0:3.2.2-4.el7  
  python-daemon.noarch 0:1.6-4.el7         python-keyczar.noarch 0:0.71c-2.el7     python-lockfile.noarch 1:0.9.1-4.el7.centos   python-migrate.noarch 0:0.9.2-2.el7       python-nose.noarch 0:1.3.7-1.el7       python-progressbar.noarch 0:2.3-4.el7   python-psycopg2.x86_64 0:2.5.1-3.el7  
  python-sqlalchemy.x86_64 0:0.9.8-2.el7   python-sqlparse.noarch 0:0.1.11-2.el7   python-tempita.noarch 0:0.5.1-6.el7           python-werkzeug.noarch 0:0.9.1-2.el7      python2-crypto.x86_64 0:2.6.1-15.el7  
  libzip.x86_64 0:0.10.1-8.el7             php.x86_64 0:5.4.16-45.el7              php-cli.x86_64 0:5.4.16-45.el7 
  
Complete!
--------------------
It's probably a good idea to install pythons PIP installer as well.

%> sudo yum -y install python36-pip
 
============ Initial setup (postgres) =============
Before we start to configure the system, we need to setup the database If you already have a working database with the baltrad database 
user created you can skip this step.

%> sudo postgresql-setup initdb
%> sudo vi /var/lib/pgsql/data/pg_hba.conf
# Change ident to md5
%> sudo systemctl start postgresql
%> sudo su - postgres
postgres ~]$ psql
postgres=# create user baltrad with password 'baltrad';
postgres=# create database baltrad with owner baltrad;
postgres=# \q
postgres ~]$ logout
%> sudo systemctl enable postgresql
 
============ Fixing blas =============
The installation of libblas does not ensure that the libblas.so is found on the LD_LIBRARY_PATH so we fix it by adding an entry in ld.so.conf.d.

%> sudo sh -c "echo /usr/lib64/blisblas > /etc/ld.so.conf.d/libblas.conf"
%> ldconfig

 ============ Setting up a new node =============
When installing the baltrad node, a user called "baltrad" is automatically created and all relevant permissions are set on the installed
software and we should login as baltrad in order to create the necessary configuration. The configuration steps will in most cases only
have to be performed at a new installation. When upgrading the software, the current configuration will be left as is by the installation
scripts.

We have tried to keep the necessary steps for creating a default configuration to a minimum but as always, it's not possible to
guess everything.
 
%> sudo su - baltrad

==== Create node specific configuration =====
First we create a node specific configuration, this will most likely only be done once / node. 

baltrad ~]$ sudo baltrad-config init --conf=localhost.properties --create-config
baltrad ~]$ gedit localhost.properties  # or whatever editor you enjoy


==== Setup node with configuration =====
Now, when the above configuration file has been created, we can just create keys and install the database

baltrad ~]$ sudo baltrad-config init --conf=localhost.properties --create-keys
baltrad ~]$ sudo baltrad-config setup --conf=localhost.properties --install-database

NOTE! After the configuration has been setup on the host, you should not have to perform the
configuration setup again since the configuration files are placed in /etc and should
not be affected by updates. 

============ Final touches =============
When this has been done, it's time to start the system and do the final touches.

==== Starting the node =====
There are 3 systemd service scripts that has been added to /usr/lib/systemd/system. These are 
 - /usr/lib/systemd/system/bdbserver.service       For controling the baltrad database service
 - /usr/lib/systemd/system/raved.service           For controlling the rave product generator
 - /usr/lib/systemd/system/baltrad-node.service    For controlling the baltrad data exchange node
 
To start these services, just do:
baltrad ~]$ sudo service bdbserver start
baltrad ~]$ sudo service raved start
baltrad ~]$ sudo service baltrad-node start

And since we want the services to be automatically started at boot,
baltrad ~]$ sudo systemctl enable raved
baltrad ~]$ sudo systemctl enable baltrad-node
baltrad ~]$ sudo systemctl enable bdbserver 

==== Import the sources =====
It's essential that a baltrad node knows about all sources (radars) and we must import the sources before we can
do anything useful with the node.

baltrad ~]$ baltrad-bdb-client import_sources --url=http://localhost:8090 /etc/baltrad/rave/config/odim_source.xml

==== Firewall  =====
If you want to ensure that you can access the dex user interface from a remote computer you will have to ensure that
the ports 8080 and 8443 are open for remote access. This is easily done by issuing the following 3 commands.

baltrad ~]$ sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent
baltrad ~]$ sudo firewall-cmd --zone=public --add-port=8443/tcp --permanent
baltrad ~]$ sudo firewall-cmd --reload

==== Finally =====
Just to ensure that everything is starting properly after the installation it might be a good idea to reboot the
computer and verify that all services has started ok.

baltrad ~]$ sudo shutdown -r now
 
=============== Appendix A ===============
This is an example of the RPMs built for installing a complete baltrad node. As you can see most of these 
packages versions are the same, even the build number are the same. However, a few packages has different version
numbers. baltrad-node-tomcat is based on apache tomcat - 8.5.34 and hence, the version is the same.
hdfview & related packages have version 2.8 and are packaged as such.  

- baltrad-beast-2.0.3-1.el7.x86_64.rpm
- baltrad-beast-external-2.0.3-1.el7.x86_64.rpm
- baltrad-config-2.0.3-1.el7.x86_64.rpm
- baltrad-db-2.0.3-1.el7.x86_64.rpm
- baltrad-db-external-2.0.3-1.el7.x86_64.rpm
- baltrad-db-java-2.0.3-1.el7.x86_64.rpm
- baltrad-dex-2.0.3-1.el7.x86_64.rpm
- baltrad-dex-tomcat-2.0.3-1.el7.x86_64.rpm
- baltrad-node-tomcat-8.5.34-1.el7.x86_64.rpm
- baltrad-viewer-2.0.3-1.el7.noarch.rpm
- baltrad-wrwp-2.0.3-1.el7.x86_64.rpm
- baltrad-wrwp-devel-2.0.3-1.el7.x86_64.rpm
- baltrad-wrwp-python-2.0.3-1.el7.x86_64.rpm
- bbufr-2.0.3-1.el7.x86_64.rpm
- beamb-2.0.3-1.el7.x86_64.rpm
- beamb-devel-2.0.3-1.el7.x86_64.rpm
- bropo-2.0.3-1.el7.x86_64.rpm
- bropo-devel-2.0.3-1.el7.x86_64.rpm
- hdfview-2.8-1.el7.noarch.rpm
- hlhdf-0.8.9-1.el7.x86_64.rpm
- hlhdf-devel-0.8.9-1.el7.x86_64.rpm
- hlhdf-python-0.8.9-1.el7.x86_64.rpm
- jhdf-2.8-1.el7.x86_64.rpm
- jhdf5-2.8-1.el7.x86_64.rpm
- jhdfobj-2.8-1.el7.noarch.rpm
- python36-cherrypy-blt-3.8.2-0.x86_64.rpm
- python36-daemon-blt-2.2.3-0.x86_64.rpm
- python36-decorator-blt-4.3.2-0.x86_64.rpm
- python36-docutils-blt-0.14-0.x86_64.rpm
- python36-jprops-blt-2.0.2-0.x86_64.rpm
- python36-keyczar-blt-0.71rc0-0.x86_64.rpm
- python36-lockfile-blt-0.12.2-0.x86_64.rpm
- python36-pbr-blt-1.10.0-0.x86_64.rpm
- python36-pillow-blt-5.4.1-0.x86_64.rpm
- python36-progressbar33-blt-2.4-0.x86_64.rpm
- python36-psycopg2-blt-2.7.7-0.x86_64.rpm
- python36-pyasn1-blt-0.4.5-0.x86_64.rpm
- python36-pycrypto-blt-2.4-0.x86_64.rpm
- python36-sqlalchemy-blt-1.0.13-0.x86_64.rpm
- python36-sqlalchemy-migrate-blt-0.10.0-0.x86_64.rpm
- python36-sqlparse-blt-0.2.4-0.x86_64.rpm
- python36-tempita-blt-0.5.2-0.x86_64.rpm
- python36-werkzeug-blt-0.14-0.x86_64.rpm
- rave-2.0.3-1.el7.x86_64.rpm
- rave-devel-2.0.3-1.el7.x86_64.rpm
 