Copyright (C) 2010- Swedish Meteorological and Hydrological Institute (SMHI)

This file is part of baltrad-package-builder.

baltrad-package-builder is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

baltrad-package-builder is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with baltrad-package-builder.  If not, see <http://www.gnu.org/licenses/>.

Author: Anders Henja
Date: 2022-01-14

==== INTRODUCTION ====
To simplify building and installation of the BALTRAD software a number of scripts
and configuration files has been added to this project. The original intention
was to build the packages on the same OS as the software should be installed on and
still is.

However, to simplify building and creating packages for different operating systems (Linuces),
we have added a docker-solution that makes it possible to create individual packages for a target
OS as well. 

There are a few folders that are of interest:
- scripts  - Here are all build scripts (except pip-artifacts)
  + scripts/build_package.sh         is used to create the baltrad packages
  + scripts/build_all.sh             will build both pip-artifacts as well as all baltrad-artifacts
  + scripts/build_docker.sh          is used when it is necessary to force a build or rebuild of a docker image
  + scripts/remove_builds.sh         removes the build(s)-catalogues
  + scripts/create_release_notes.sh  creates the release notes

- pip-artifacts - Several dependencies are only available as pip-packages. However, since we want to install all our dependencies using yum we are creating packages from a number of pip-packages.
  + pip-artifacts/create_3p_packages.sh   Creates all pip-packages for the requested OS
  
- packages - Here are all baltrad-specific packages defined.
  Each directory under packages is defined as an baltrad-artifact and each of these directories should contain a file called package.ini
  
- docker - Here are the supported docker containers defined.
  Each directory under this package maps to one operating system. For example Ubuntu-21.10 or CentOS-8.
  
==== BUILDING ====
As mentioned earlier, there are two variants for building the system. Either on the operating system that
the packages are ment to be run on or by using the builtin docker support.

======= Host =========
In order to build the system you will have to setup the necessary requirements. A good start is to look at the Dockerfiles that
are located under the different OS-variants in the "docker"-folder. The Dockerfiles will contain necessary third-party requirements
as well as necessary commands in order to get all dependencies in place before building the system.

Most likely you are interested in building all packages at the same time and the command to use for that is something like:

%> ./scripts/build_all.sh auto --build-log=build.log --artifacts=/<software repo>/artifacts

Which will atempt to build all artifacts for the current operating system. However, in a lot of cases this will
obviously not work and then it might be time to look at the "Docker" support instead.

======= Docker =========
First, if you are planning to build packages continously for one specific operating system the best approach
it to create a proper docker container and then clone the baltrad-package-builder in that container and build
everything in there and this approach is quite similar to how the system is built on any other server.

For developing / building separate packages for specific operating system we have added a specific option
so that it is possible to build the packages within a docker containter directly from the host. This options is
named "--docker" and is specified with --docker=<OS variant> where OS-variant is defined in the folder "docker". 
This option is supported by build_package.sh, build_all.sh and create_3p_packages.sh.

You can list all supported OS-variants by listing the folders inside the docker-folder, for example by running "ls -1 docker/" or
"./scripts/build_docker.sh list". 

At the time of writing this README, there are two different operating systems defined, CentOS-8 & Ubuntu-21.10. The created docker 
image will be named <OS-variant>-bpb-image where the <OS-variant> will be translated to lower-characters.

When issuing the --docker=<OS-variant>. A new docker container will be spawned with the same name as the docker image for each package build by using docker run. 
If the command is executed successfully in the docker container then the successful container change will be committed to the image to keep track on previous
builds and to be able to ensure that dependencies are in place. 

The docker image is only built once for the specified operating system and if the Dockerfile is modified or
you want to ensure that the package is installed from scratch and not updated then you can use the build_docker.sh script.

========== Docker caveats ================
In order to make the docker build process not affecting the local file system in any way, this project (baltrad-package-builder) will
be archived into a tar-file that will be unpacked inside the docker container. To only archive the relevant scripts the command
"git ls-files" has been used which has the downside that files that hasn't been added to the project will not be archived. Obviously,
this means that any files that should be used in the build-process must be added (git add...) to the project before trying to use
the docker support.














To get started there are a few dependencies that has to be installed before atempting
to build the various packages.

On Ubuntu 16.04/18.04

sudo apt-get install libpq-dev

%> sudo apt-get install git
%> sudo apt-get install python
%> sudo apt-get install devscripts build-essential lintian
%> sudo apt-get install openjdk-8-jdk python2.7-dev python-setuptools
%> sudo apt-get install python-pip
%> sudo -H pip install jprops

After that, you
BALTRAD-DB install (UBUNTU)
%> sudo apt-get install openjdk-8-jre
%> pip jprops 
%> sudo apt-get install python-progressbar python-psycopg2 python-migrate python-werkzeug
%> sudo apt-get install python-daemon python-keyczar libpostgresql-jdbc-java python-cherrypy3

BALTRAD-DB install (CENTOS)
%> sudo yum install python-pip python-pbr


sudo pip install "sqlalchemy-migrate==0.10.0"
baltrad-bdb-create --conf bdb.properties
baltrad-bdb-server --conf bdb.properties --pidfile bdb.pid --logfile bdb.log --foreground
keytool -genkey -alias tomcat -keyalg RSA -validity 3650 -keypass secret - -keystore /projects/baltrad/etc/bltnode-keys/keystore.jks -dname "CN=Unknown,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown"

mkdir /home/anders/bdb-running/etc/test.priv
python -m keyczar.keyczart create --location=/projects/baltrad/etc/bltnode-keys/test.priv --purpose=sign --name=test --asymmetric=dsa

python -m keyczar.keyczart addkey --location=/projects/baltrad/etc/bltnode-keys/test.priv --status=primary

mkdir /home/anders/bdb-running/etc/test.pub
python -m keyczar.keyczart pubkey --location=/home/anders/bdb-running/etc/test.priv --destination=/home/anders/bdb-running/etc/test.pub --status=primary


"""" bdb.properties
# Can be werkzeug or cherrypy (recommended)
baltrad.bdb.server.type = cherrypy
# Number of working threads for cherrypy
baltrad.bdb.server.cherrypy.threads = 10
# The request queue size (backlog)
baltrad.bdb.server.cherrypy.backlog = 5
# The timeout for accepted connections
baltrad.bdb.server.cherrypy.timeout = 10

baltrad.bdb.server.uri = http://localhost:8090
baltrad.bdb.server.enable_remove_all_files=false
baltrad.bdb.server.backend.type = sqla
baltrad.bdb.server.backend.sqla.uri = postgresql://baltrad:baltrad@localhost/baltrad
baltrad.bdb.server.backend.sqla.storage.type=db
baltrad.bdb.server.backend.sqla.storage.fs.path=/tmp/bdb_storage
baltrad.bdb.server.backend.sqla.storage.fs.layers=3
baltrad.bdb.server.auth.providers=noauth, keyczar
baltrad.bdb.server.auth.verify_content=true
baltrad.bdb.server.auth.keyczar.keystore_root=/home/anders/bdb-running/etc
baltrad.bdb.server.auth.keyczar.keys.test=test.pub
""""


BWRWP:
, libatlas-base-dev


DEX:
sudo apt-get install libjhdf4-java libjhdf5-java

('creating private key in', '/opt/bltupgradetest/etc/bltnode-keys/anders-nzxt.priv')
('exporting public key to', '/opt/bltupgradetest/etc/bltnode-keys/anders-nzxt.pub')
('creating keystore file', '/opt/bltupgradetest/etc/bltnode-keys/keystore.jks')



OTHER:

anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo mkdir /var/lib/baltrad/etc
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo mkdir /var/lib/baltrad/etc/bltnode-keys
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo mkdir /var/lib/baltrad/etc/bltnode-keys/anders7480.priv
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo mkdir /var/lib/baltrad/etc/bltnode-keys/anders7480.pub
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo python -m keyczar.keyczart create --location=/var/lib/baltrad/etc/bltnode-keys/anders7480.priv --purpose=sign --name=anders7480 --asymmetric=dsa
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo python -m keyczar.keyczart addkey --location=/var/lib/baltrad/etc/bltnode-keys/anders7480.priv --status=primary
anders@anders-7480:/projects/baltrad/baltrad-package-builder$ sudo python -m keyczar.keyczart pubkey --location=/var/lib/baltrad/etc/bltnode-keys/anders7480.priv --destination=/var/lib/baltrad/etc/bltnode-keys/anders7480.pub --status=primary



psql "postgresql://baltrad:baltrad@localhost/baltrad" < /opt/baltrad/baltrad-dex/sql/create_dex_schema.sql
psql "postgresql://baltrad:baltrad@localhost/baltrad" < /opt/baltrad/baltrad-beast/sql/create_db.sql

sudo vi /etc/tomcat7/server.xml
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol" SSLEnabled="true"
               maxThreads="150" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" sslEnabledProtocols="TLSv1,TLSv1.1,TLSv1.2,SSLv2Hello"
               keystoreFile="/etc/baltrad/bltnode-keys/keystore.jks" keystorePass="secret" />





RPM:
%> sudo yum install python-pip
%> sudo pip install --upgrade pip
%> sudo rpm -ivh packages/hlhdf/artifacts/hlhdf*.rpm
%> sudo yum install python-cherrypy python-daemon python-keyczar python-migrate python-progressbar python-sqlalchemy python-werkzeug
%> sudo pip install "pbr>=0.5.21,<1.0"
%> yum install postgresql-jdbc
%> sudo rpm -ivh packages/baltrad-db/artifacts/baltrad-db*.rpm
%> sudo su baltrad -s /bin/bash -c "baltrad-bdb-create --conf=/var/lib/baltrad/bltnode.properties"
%> sudo yum install hdf-devel
%> yum install atlas-sse3 lapack-devel blas-devel atlas-devel gsl-devel # FOR WRWP

