diff --git a/setup.py b/setup.py
index 4328f84..97443ef 100755
--- a/setup.py
+++ b/setup.py
@@ -3,8 +3,9 @@ import setuptools
 import sys
 
 REQUIRED_PACKAGES= [
-    "baltradcrypto",
-    "baltradutils"
+    "pyasn1",
+    "pycrypto >= 2.4",
+    "python3-keyczar >= 0.71rc0",
 ]
 
 setuptools.setup(name="baltrad.config",
diff --git a/src/baltrad/config/bltcmd.py b/src/baltrad/config/bltcmd.py
index a35a434..a159f34 100755
--- a/src/baltrad/config/bltcmd.py
+++ b/src/baltrad/config/bltcmd.py
@@ -33,7 +33,7 @@ import json
 import os
 import base64
 import datetime
-from baltradcrypto.crypto import keyczarcrypto 
+from keyczar import keyczar 
 
 DEFAULT_HOST="http://localhost:8080"
 DEFAULT_URI="%s/BaltradDex/administrator.htm"%DEFAULT_HOST
@@ -82,7 +82,7 @@ class bltcmd(object):
     self._uri = uri
     self._nodename = nodename
     self._privatekey=privatekey
-    self._signer = keyczarcrypto.keyczar_signer.read(self._privatekey)
+    self._signer = keyczar.Signer.Read(self._privatekey)
       
   def _generate_headers(self, message):
     d = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
diff --git a/src/baltrad/config/main.py b/src/baltrad/config/main.py
index 65a219d..19e9bd7 100644
--- a/src/baltrad/config/main.py
+++ b/src/baltrad/config/main.py
@@ -32,8 +32,6 @@ import pwd, grp
 from baltrad.config import propertyhandler
 from baltrad.config import database
 
-from baltradcrypto.crypto import keyczarcrypto
-
 if sys.version_info < (3,):
   import urlparse
 else:
@@ -71,8 +69,7 @@ def createdir(dir):
     os.mkdir(dir)
   elif not os.path.isdir(dir):
     raise Exception("%s exists but is not a directory"%dir)
-
-# This method uses the linux command keytool    
+    
 def create_keystore(keystore, kpwd=None, dname=None):
   while kpwd == None:
     kpwd=read_input("Keystore password: ")
@@ -90,25 +87,38 @@ def create_keystore(keystore, kpwd=None, dname=None):
     raise Exception("keytool command failed for keystore creation")
   return kpwd
 
-# Code snippet from baltrad-exchange/src/bexchange/client/cfgcmd.py
+
+def keyczar_tool(*module_args):
+  python_bin = sys.executable
+  keytool = "keyczar.keyczart"
+  if (sys.version_info > (3,0)):
+    keytool = "keyczar.tool.keyczart"
+  args = [python_bin, "-m", keytool]
+  args.extend(module_args)
+  ocode = subprocess.call(args)
+  if ocode != 0:
+    raise Exception("keytool command failed")
+
+      
 def create_priv_pub_keys(keys_root, nodename):
   priv_nodekey = "%s/%s.priv"%(keys_root, nodename)
   pub_nodekey = "%s/%s.pub"%(keys_root, nodename)
   if not os.path.exists(priv_nodekey):
-    os.makedirs(priv_nodekey)
-
+    createdir(priv_nodekey)
+    keyczar_tool("create",
+                 "--location=%s" % priv_nodekey,
+                 "--purpose=sign",
+                 "--name=%s" % nodename,
+                 "--asymmetric=dsa")
+    keyczar_tool("addkey",
+                 "--location=%s" % priv_nodekey,
+                 "--status=primary")
+  
   if not os.path.exists(pub_nodekey):
-    os.makedirs(pub_nodekey)
-
-    keyczar_signer = keyczarcrypto.create_keyczar_key()
-    keyczar_verifier = keyczarcrypto.keyczar_verifier(keyczar_signer._key)
-        
-    keyczar_signer.export(priv_nodekey, nodename)
-    keyczar_verifier.export(pub_nodekey, nodename)
-
-    print("Created: ")
-    print("  Private key: %s"%priv_nodekey)
-    print("  Public  key: %s"%pub_nodekey)               
+    createdir(pub_nodekey)
+    keyczar_tool("pubkey",
+                 "--location=%s" % priv_nodekey,
+                 "--destination=%s" % pub_nodekey)               
 
 def create_initial_config(args):
   a=propertyhandler.propertyhandler()
diff --git a/src/baltrad/config/propertyhandler.py b/src/baltrad/config/propertyhandler.py
index 24fb011..d659c91 100644
--- a/src/baltrad/config/propertyhandler.py
+++ b/src/baltrad/config/propertyhandler.py
@@ -19,7 +19,7 @@ along with baltrad-config.  If not, see <http://www.gnu.org/licenses/>.
 
 '''
 import socket
-import baltradutils.jprops
+import jprops
 import tempfile
 import re
 import os
@@ -114,7 +114,7 @@ class propertyhandler(object):
     
   def _load_properties(self, cfile):
     with open(cfile, "r") as fp:
-      return baltradutils.jprops.load_properties(fp)
+      return jprops.load_properties(fp)
     
   def write_config_file(self, config_file):
     with open(config_file, "w") as fp:
